{"ast":null,"code":"import express from \"express\";\nimport axios from \"axios\";\nimport cors from \"cors\";\nimport dotenv from \"dotenv\";\ndotenv.config();\nconst app = express();\napp.use(express.json());\napp.use(cors());\napp.post(\"/ask\", async (req, res) => {\n  const {\n    query\n  } = req.body;\n  try {\n    const [openai, claude, gemini, mistral] = await Promise.all([axios.post(\"https://api.openai.com/v1/chat/completions\", {\n      model: \"gpt-4o-mini\",\n      messages: [{\n        role: \"user\",\n        content: query\n      }]\n    }, {\n      headers: {\n        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`\n      }\n    }), axios.post(\"https://api.anthropic.com/v1/messages\", {\n      model: \"claude-3-opus-20240229\",\n      messages: [{\n        role: \"user\",\n        content: query\n      }]\n    }, {\n      headers: {\n        Authorization: `Bearer ${process.env.CLAUDE_API_KEY}`\n      }\n    }), axios.post(\"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=\" + process.env.GOOGLE_API_KEY, {\n      contents: [{\n        role: \"user\",\n        parts: [{\n          text: query\n        }]\n      }]\n    }), axios.post(\"https://api.mistral.ai/v1/chat/completions\", {\n      model: \"mistral-large-latest\",\n      messages: [{\n        role: \"user\",\n        content: query\n      }]\n    }, {\n      headers: {\n        Authorization: `Bearer ${process.env.MISTRAL_API_KEY}`\n      }\n    })]);\n    const results = [{\n      source: \"AI 1 (OpenAI GPT)\",\n      answer: openai.data.choices[0].message.content\n    }, {\n      source: \"AI 2 (Claude)\",\n      answer: claude.data.content[0].text\n    }, {\n      source: \"AI 3 (Google Gemini)\",\n      answer: gemini.data.candidates[0].content.parts[0].text\n    }, {\n      source: \"AI 4 (Mistral)\",\n      answer: mistral.data.choices[0].message.content\n    }];\n    res.json({\n      query,\n      results\n    });\n  } catch (error) {\n    var _error$response;\n    console.error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    res.status(500).json({\n      error: \"Failed to fetch AI responses\"\n    });\n  }\n});\napp.listen(3000, () => console.log(\"ðŸš€ Backend running at http://localhost:3000\"));","map":{"version":3,"names":["express","axios","cors","dotenv","config","app","use","json","post","req","res","query","body","openai","claude","gemini","mistral","Promise","all","model","messages","role","content","headers","Authorization","process","env","OPENAI_API_KEY","CLAUDE_API_KEY","GOOGLE_API_KEY","contents","parts","text","MISTRAL_API_KEY","results","source","answer","data","choices","message","candidates","error","_error$response","console","response","status","listen","log"],"sources":["C:/Users/suyash/OneDrive/Desktop/react/aiagent/aibackend/src/index.js"],"sourcesContent":["import express from \"express\";\r\nimport axios from \"axios\";\r\nimport cors from \"cors\";\r\nimport dotenv from \"dotenv\";\r\n\r\ndotenv.config();\r\nconst app = express();\r\napp.use(express.json());\r\napp.use(cors());\r\n\r\napp.post(\"/ask\", async (req, res) => {\r\n  const { query } = req.body;\r\n\r\n  try {\r\n    const [openai, claude, gemini, mistral] = await Promise.all([\r\n      axios.post(\"https://api.openai.com/v1/chat/completions\", {\r\n        model: \"gpt-4o-mini\",\r\n        messages: [{ role: \"user\", content: query }],\r\n      }, { headers: { Authorization: `Bearer ${process.env.OPENAI_API_KEY}` } }),\r\n\r\n      axios.post(\"https://api.anthropic.com/v1/messages\", {\r\n        model: \"claude-3-opus-20240229\",\r\n        messages: [{ role: \"user\", content: query }],\r\n      }, { headers: { Authorization: `Bearer ${process.env.CLAUDE_API_KEY}` } }),\r\n\r\n      axios.post(\r\n        \"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=\" + process.env.GOOGLE_API_KEY,\r\n        { contents: [{ role: \"user\", parts: [{ text: query }] }] }\r\n      ),\r\n\r\n      axios.post(\"https://api.mistral.ai/v1/chat/completions\", {\r\n        model: \"mistral-large-latest\",\r\n        messages: [{ role: \"user\", content: query }],\r\n      }, { headers: { Authorization: `Bearer ${process.env.MISTRAL_API_KEY}` } })\r\n    ]);\r\n\r\n    const results = [\r\n      { source: \"AI 1 (OpenAI GPT)\", answer: openai.data.choices[0].message.content },\r\n      { source: \"AI 2 (Claude)\", answer: claude.data.content[0].text },\r\n      { source: \"AI 3 (Google Gemini)\", answer: gemini.data.candidates[0].content.parts[0].text },\r\n      { source: \"AI 4 (Mistral)\", answer: mistral.data.choices[0].message.content }\r\n    ];\r\n\r\n    res.json({ query, results });\r\n  } catch (error) {\r\n    console.error(error.response?.data || error.message);\r\n    res.status(500).json({ error: \"Failed to fetch AI responses\" });\r\n  }\r\n});\r\n\r\napp.listen(3000, () => console.log(\"ðŸš€ Backend running at http://localhost:3000\"));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}